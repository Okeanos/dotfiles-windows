#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_" || return
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${*%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	size=$(
		stat -f"%z" "${tmpFile}" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}" 2>/dev/null # GNU `stat`
	)

	local cmd=""
	if ((size < 52428800)) && hash zopfli 2>/dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2>/dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…"
	"${cmd}" -v "${tmpFile}" || return 1
	[[ -f "${tmpFile}" ]] && rm "${tmpFile}"

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2>/dev/null # GNU `stat`
	)

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$*" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* ./*
	fi
}

# Use Git’s colored diff when available
if hash git &>/dev/null; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from a file
function dataurl() {
	local mimeType
	mimeType=$(file -b --mime-type "${1}")
	if [[ "${mimeType}" == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(base64 --wrap=0 "${1}")"
}

# Start an HTTP server from the current directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	python3 -m http.server "${port}"
}

# Compare original and gzipped file size
function gz() {
	local origsize gzipsize ratio
	origsize=$(stat -Lc"%s" -- "${1}" 2>/dev/null)
	gzipsize=$(gzip -c "${1}" | wc -c)
	ratio=$(echo "${gzipsize} * 100 / ${origsize}" | bc -l)
	printf "orig: %d bytes\n" "${origsize}"
	printf "gzip: %d bytes (%2.2f%%)\n" "${gzipsize}" "${ratio}"
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "${1}" any +multiline +noall +answer
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [[ -z "${1}" ]]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain tmp certText

	domain="${1}"
	echo "Testing ${domain}…"
	echo "" # newline

	tmp=$(echo -e "GET / HTTP/1.0\nEOT" |
		openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		certText=$(echo "${tmp}" |
			openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version")
		echo "Common Name:"
		echo "" # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
		echo "" # newline
		echo "Subject Alternative Name(s):"
		echo "" # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" |
			sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! "$(uname -s)" = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe'
	else
		alias open='xdg-open'
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [[ $# -eq 0 ]]; then
		open .
	else
		open "$@"
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `bat`.
function tre() {
	tree -aC -I '.git|node_modules|target|build|vendor' --dirsfirst "$@" |
		bat
}

# `git-sync` is a wrapper function around `find`, `xargs` that will
# asynchrounously call git pull --rebase --autostash on any repository one level
# down from the specified path.
function git-sync {
	local path="."
	if [[ $# -ne 0 ]]; then
		path="${1}"
	fi
	find "${path}" -maxdepth 2 -mindepth 2 -type d -name '.git' -print0 |
		xargs -P 8 -0 -I % bash -c 'git -C %/.. pull --rebase --autostash --quiet || echo "Failed updating: %"'
}

# `git-fetch` is a wrapper function around `find`, `xargs` that will
# asynchrounously call --all --prune --prune-tags --quiet on any repository one level
# down from the specified path.
function git-fetch {
	local path="."
	if [[ $# -ne 0 ]]; then
		path="${1}"
	fi
	find "${path}" -maxdepth 2 -mindepth 2 -type d -name '.git' -print0 |
		xargs -P 8 -0 -I % bash -c 'git -C %/.. fetch --all --prune --prune-tags --quiet || echo "Failed updating: %"'
}

# `handle-secrets` is a wrapper function around `gitleaks` and allows you to
# interactively go through any finding gitleaks detects in the supplied folder
# and put them into a `.gitleaksignore` file with appropriate comments
function handle-secrets {
	local target_directory report_directory report_file git_name git_email git_user ignore_file_contents current_time description rule file fingerprint commit secret comment documented_as

	target_directory=$(realpath --canonicalize-missing "${1}")
	report_directory=$(mktemp --directory --quiet)
	report_file=$(realpath --canonicalize-missing "${report_directory}/report.json")
	git_name=$(git config --get user.name)
	git_email=$(git config --get user.email)
	git_user="${git_name} <${git_email}>"
	ignore_file_contents=""
	current_time=$(date +"%Y-%m-%dT%H:%M")

	if ! command -v gitleaks >/dev/null; then
		echo "gitleaks not installed, cannot scan for secrets"
		return 1
	fi

	if [[ ! -d "${target_directory}" ]]; then
		echo "The given directory at '${path}' does not exist"
		return 1
	fi

	echo "Scanning: ${target_directory}"
	if [[ -f "${target_directory}/.gitleaksignore" ]]; then
		ignore_file_contents=$(<"${target_directory}/.gitleaksignore")
		ignore_file_contents+="\n"
	else
		ignore_file_contents="# https://github.com/gitleaks/gitleaks\n\n"
	fi
	gitleaks git --verbose --report-format=json --report-path="${report_file}" --max-decode-depth 1 --exit-code=0 "${target_directory}" &>/dev/null

	if [[ -f ${report_file} ]]; then
		if [[ $(jq length "${report_file}") == 0 ]]; then
			echo "No secrets detected"
			return 0
		fi
		readarray -t findings < <(jq --compact-output '.[]' "${report_file}")

		for finding in "${findings[@]}"; do
			description=$(echo -n "${finding}" | jq ".Description")
			rule=$(echo -n "${finding}" | jq ".RuleID")
			file=$(echo -n "${finding}" | jq ".File")
			fingerprint=$(echo -n "${finding}" | jq --raw-output ".Fingerprint")
			commit=$(echo -n "${finding}" | jq ".Commit")
			secret=$(echo -n "${finding}" | jq ".Secret")
			comment=""
			documented_as=""
			echo "Secret detected: ${rule}"
			echo "Description: ${description}"
			echo "File: ${file}"
			echo "Commit: ${commit}"
			echo "Secret: ${secret}"
			select finding_type in "False Positive" "Valid" "Other"; do
				[[ -n "${finding_type}" ]] || {
					echo "Please select a valid option." >&2
					continue
				}
				documented_as="${finding_type}"
				break
			done
			read -rp "Enter an additional comment to document the ignore entry: " comment
			ignore_file_contents+="# Finding acknowledged by ${git_user} on ${current_time} as '${documented_as}'\n"
			if [[ -n ${comment} ]]; then
				ignore_file_contents+="# ${comment}\n"
			fi
			ignore_file_contents+="${fingerprint}\n"
		done

		if [[ -n "${ignore_file_contents}" ]]; then
			echo -e "${ignore_file_contents}" >"${target_directory}/.gitleaksignore"
			echo "All secrets handled and written to: '${target_directory}/.gitleaksignore'"
		fi
	else
		echo "gitleaks did not generate a report as expected, something may have gone wrong"
	fi
}
